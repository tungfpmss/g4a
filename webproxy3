using System;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Threading.Tasks;

class WebProxy
{
    private TcpListener _listener;
    private const int BufferSize = 8192;

    public WebProxy(IPAddress ipAddress, int port)
    {
        _listener = new TcpListener(ipAddress, port);
    }

    public async Task StartAsync()
    {
        _listener.Start();
        Console.WriteLine("WebProxy started.");

        while (true)
        {
            var client = await _listener.AcceptTcpClientAsync();
            _ = HandleClientAsync(client);
        }
    }

    private async Task HandleClientAsync(TcpClient client)
    {
        NetworkStream networkStream = client.GetStream();

        try
        {
            // Read image data from the client
            byte[] buffer = new byte[BufferSize];
            using (MemoryStream memoryStream = new MemoryStream())
            {
                int bytesRead;
                while ((bytesRead = await networkStream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                {
                    memoryStream.Write(buffer, 0, bytesRead);
                }

                byte[] imageData = memoryStream.ToArray();
                Console.WriteLine($"Received image of size {imageData.Length} bytes.");

                // Process the image data (e.g., save to file)
                string filePath = Path.Combine("ReceivedImages", $"{Guid.NewGuid()}.jpg");
                Directory.CreateDirectory(Path.GetDirectoryName(filePath));
                await File.WriteAllBytesAsync(filePath, imageData);
                Console.WriteLine($"Saved image to {filePath}");

                // Respond back to the client
                string response = "Image received and processed.";
                byte[] responseBytes = System.Text.Encoding.UTF8.GetBytes(response);
                await networkStream.WriteAsync(responseBytes, 0, responseBytes.Length);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling client: {ex.Message}");
        }
        finally
        {
            client.Close();
        }
    }

    public void Stop()
    {
        _listener.Stop();
        Console.WriteLine("WebProxy stopped.");
    }
}

class Program
{
    static async Task Main(string[] args)
    {
        var proxy = new WebProxy(IPAddress.Any, 8080);
        await proxy.StartAsync();
    }
}
