using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

class TcpProxy
{
    private static readonly string TargetServer = "your-target-server.com"; // Địa chỉ Server đích
    private static readonly int TargetPort = 80; // Cổng Server đích
    private static readonly int ProxyPort = 8080; // Cổng chạy Proxy

    static async Task Main()
    {
        TcpListener listener = new TcpListener(IPAddress.Any, ProxyPort);
        listener.Start();
        Console.WriteLine($"🚀 Proxy Server đang chạy trên cổng {ProxyPort}...");

        while (true)
        {
            TcpClient client = await listener.AcceptTcpClientAsync();
            _ = Task.Run(() => HandleClient(client)); // Xử lý từng client trên luồng riêng
        }
    }

    private static async Task HandleClient(TcpClient client)
    {
        using (client)
        using (NetworkStream clientStream = client.GetStream())
        using (TcpClient server = new TcpClient())
        {
            try
            {
                Console.WriteLine($"🔗 Client kết nối từ {((IPEndPoint)client.Client.RemoteEndPoint).Address}");

                // Kết nối đến Server đích
                await server.ConnectAsync(TargetServer, TargetPort);
                using (NetworkStream serverStream = server.GetStream())
                {
                    // Chuyển tiếp dữ liệu giữa Client & Server
                    Task clientToServer = TransferData(clientStream, serverStream);
                    Task serverToClient = TransferData(serverStream, clientStream);
                    await Task.WhenAny(clientToServer, serverToClient);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"❌ Lỗi: {ex.Message}");
            }
        }
    }

    private static async Task TransferData(NetworkStream fromStream, NetworkStream toStream)
    {
        byte[] buffer = new byte[4096];
        int bytesRead;
        try
        {
            while ((bytesRead = await fromStream.ReadAsync(buffer, 0, buffer.Length)) > 0)
            {
                await toStream.WriteAsync(buffer, 0, bytesRead);
                await toStream.FlushAsync();
            }
        }
        catch (Exception) { }
    }
}
