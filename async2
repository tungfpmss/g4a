using System;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Net.Sockets;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WindowsFormsApp1
{
    public partial class Form1 : Form
    {
        private const int Port = 8000;
        private const int BufferSize = 8192; // 8 KB buffer size
        private TcpListener listener;
        private TcpClient client;
        private WebProxy proxy;

        public Form1()
        {
            InitializeComponent();
            InitializeTcpComponents();
            ConfigureProxy();
        }

        private void InitializeTcpComponents()
        {
            listener = new TcpListener(IPAddress.Any, Port);
            listener.Start();
            listener.BeginAcceptTcpClient(new AsyncCallback(AcceptCallback), listener);
        }

        private void ConfigureProxy()
        {
            // Configure the proxy settings here
            proxy = new WebProxy("http://127.0.0.2:8800", true)
            {
                Credentials = new NetworkCredential("sdv", "1")
            };
        }

        private async void AcceptCallback(IAsyncResult ar)
        {
            try
            {
                TcpListener listener = (TcpListener)ar.AsyncState;
                client = listener.EndAcceptTcpClient(ar);
                await ReceiveImageAsync(client);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error accepting client: {ex.Message}");
            }
        }

        private async Task ReceiveImageAsync(TcpClient client)
        {
            try
            {
                NetworkStream stream = client.GetStream();
                using (MemoryStream ms = new MemoryStream())
                {
                    byte[] buffer = new byte[BufferSize];
                    int bytesRead;
                    while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                    {
                        ms.Write(buffer, 0, bytesRead);
                    }
                    ms.Position = 0;
                    using (GZipStream decompressionStream = new GZipStream(ms, CompressionMode.Decompress))
                    {
                        using (MemoryStream decompressedMs = new MemoryStream())
                        {
                            await decompressionStream.CopyToAsync(decompressedMs);
                            decompressedMs.Position = 0;
                            Image receivedImage = Image.FromStream(decompressedMs);
                            // Display the received image in a PictureBox or handle it as needed
                            pictureBox2.Image = receivedImage;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error receiving image: {ex.Message}");
            }
        }

        private async void SendImageAsync(Image image, string ipAddress)
        {
            try
            {
                using (TcpClient client = new TcpClient())
                {
                    // Use the proxy settings
                    client.Connect(proxy.Address.Host, proxy.Address.Port);
                    NetworkStream stream = client.GetStream();
                    using (MemoryStream ms = new MemoryStream())
                    {
                        image.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
                        ms.Position = 0;
                        using (GZipStream compressionStream = new GZipStream(ms, CompressionMode.Compress))
                        {
                            byte[] buffer = new byte[BufferSize];
                            int bytesRead;
                            while ((bytesRead = await ms.ReadAsync(buffer, 0, buffer.Length)) > 0)
                            {
                                await stream.WriteAsync(buffer, 0, bytesRead);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error sending image: {ex.Message}");
            }
        }

        private void buttonSend_Click(object sender, EventArgs e)
        {
            try
            {
                // Example usage: send an image to a specific IP address
                Image imageToSend = pictureBox1.Image; // Assume pictureBox1 contains the image to send
                string ipAddress = "127.0.0.1"; // Replace with the target IP address
                SendImageAsync(imageToSend, ipAddress);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error in buttonSend_Click: {ex.Message}");
            }
        }

        private void buttonReceive_Click(object sender, EventArgs e)
        {
            try
            {
                // Start listening for incoming connections
                InitializeTcpComponents();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error in buttonReceive_Click: {ex.Message}");
            }
        }
    }
}
